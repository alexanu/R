install.packages("data.table")# we need the function "fread" from this package.
install.packages("fasttime") # we need the function "fastPOSIXct" from this package.
install.packages("lubridate")

library(data.table) # we need the function "fread" from this package.
library(fasttime) # we need the function "fastPOSIXct" from this package
library(lubridate)
library(ggplot2)

Path <- "L:\\AGCS\\CFO\\Metadata\\For 2013\\Weight table\\tick_data" # The directory where all the tick data files are stored
tickers <- gsub(".txt", "", # I need to get rid of file extensions
			list.files(path = Path)) # ...give a list of all the files in the directory
Symbol_Path <- paste0(Path ,"\\",tickers,".txt")
datalist = lapply(Symbol_Path, #creates list: reads all  the txt file from the folder and every dataframe in separate list componentassuming tab separated values with a header   
			FUN=fread, # fread from the package "DATA.TABLE" does it much faster than read.table (standard functionality). The comparison of time could be done using function system.time(x), where x is our expression
			stringsAsFactors=FALSE,
			dec=",") # OLHC data has comma as a decimal separator   

datalist <- mapply(cbind, datalist , "Ticker"=tickers, SIMPLIFY=F) # add new column to every dataframe in the list and fills it with the symbol
datatb = rbindlist(datalist) # #merges down all the data tables. The function is from data.table package. Another way is to do like this: "do.call("rbind", datalist)". The alternative way could be slower
datatb[,Date:=paste(format(as.Date(datatb[,Date],format="%d.%m.%Y"),"%Y-%m-%d"),datatb[,Time],sep=" ")] # the date and time are in 2 columns: we need to merge them
datatb[,Date:=fastPOSIXct(datatb[,Date],"GMT")]# This is much faster than to do it with "as.POSIXct" function from standart functionality
datatb[,':='(Time=NULL, V8=NULL)] # delete not needed column
datatb[,Volume:=as.numeric(datatb[,Volume])] # we need this in order to work with Volumes as integer is not enough


datatb[,.(.N), by=.(weekdays(Date),Ticker)] # number of rows
datatb[,.(sum(Volume),.N), by=.(wday(Date),hour(Date))] # volume of trades by day and hour





Vol_over <-  dcast(datatb[,.(Vol=round(sum(Volume)/1e6, 1)),  # to show in millions
				  keyby=.(wday(Date,label=TRUE), # we need "keyby" no just "by", because we need sorted data. "wday" is from "lubridate" package
				  hour(Date),
				  Ticker)],
			wday+hour~Ticker, # vertical axes ~ horizontal axis
			value.var = "Vol") # values
Vol_over[,wday:=paste(wday,hour,sep=" ")][,':='(hour=NULL)]
Vol_over[, 2:5:=lapply(.SD, rank),.SDcols = 2:5]

 



ggplot(datatb[Date>"2011-11-01" & Date<"2012-11-01"],
	 aes(x=Date,
	     y=Close,
	     colour=Ticker))+
	geom_line()+
	geom_smooth()+
	facet_wrap(~Ticker)


ggplot(datatb[(Close-Open)/Open >0.0025],
	 aes(Date))+
	geom_histogram()+ # or "geom_freqpoly" could be also used
	facet_wrap(~Ticker, ncol=1)




ggplot(datatb[,.(mean(Volume),.N),by=.(Ticker,wday(Date,label=TRUE))],
	 aes(x=wday,
	     y=V1,
	     colour=Ticker))+
	geom_point(aes(size=N))+
	scale_size_area() +
	xlab(NULL)+
	ylab("Avg Volume")
ggsave("plot.png", width = 5, height = 5)


DAY <- datatb[Date>"2011-11-01" & Date<"2011-11-02" & Ticker=="LL"]
DAY[,D:=Close>Open]
ggplot(DAY, 
		   aes(Date, 
			 Close, 
			 ymin = Low, 
			 ymax = High,
			 colour=D))+ 
	  geom_pointrange()




ggplot(datatb[Ticker=="LL",.(mean(Volume),mean(Close)),by=.(year(Date),month(Date,label=TRUE))],
	 aes(x=paste(year,month,sep=" "),
	     y=V1,
	     colour = V2))+
	geom_line(aes(group=1), size = 2)+
	geom_point(size = 5)


ggplot(datatb[,.(sum(Volume),mean(Close)),by=.(Ticker,year(Date),month(Date,label=TRUE))],
	 aes(x=paste(year,month,sep=" "),
	     y=V2,
	     colour = Ticker))+
	geom_point(aes(size = V1))+
	scale_size_area("Monthly volume", breaks = c(1000000, 2000000, 3000000,4000000))


ggplot(datatb,
	 aes(Date))+
	 geom_histogram(aes(fill = Ticker), 
			   position = "fill",
			   na.rm = TRUE)
			   
			   install.packages("hexbin")
library(hexbin)
ggplot(datatb[,.(sum(Volume),(mean(Close)-mean(Open))/mean(Open)),by=.(Ticker,year(Date),month(Date,label=TRUE))],
	 aes(V2,V1))+
	 geom_hex()
