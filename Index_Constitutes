DJ_components <- function(){
				install.packages("XML")
				library(XML) #Load package. WE need readHTMLTable function from this package
				
				url = readLines('http://finance.yahoo.com/q/cp?s=^DJI+Components')
				
				all <- readHTMLTable(url, stringsAsFactors=FALSE)$yfncsumtab # readHTMLTable creates a dataframe. You could use the functions "names(readHTMLTable(url))" to see which tables are available. The values are stored in "yfncsumtab" table
				
				names(all)<- all[5,] # First, the table appears with the headers "V1, V2,...". More convinient to make headers from the 5th row
				all <-all[-(1:5),] # First 5 rows contain some rubbish
				DJComponents <- all[,1] # The symbols are in the 1st column
				DJComponents} # The prolongation of this function could be to run it periodically to see the change in components


sp500_components <- function(){
      				install.packages("XML")
      				library(XML) #Load package. We need readHTMLTable function from this package
  
      				url = readLines('http://www.cboe.com/products/snp500.aspx')
      				all <- as.data.frame(readHTMLTable(url), stringsAsFactors=FALSE)) # Usually, readHTMLTable creates a dataframe, however here it is somehow a list
      				SP500_Components <- all[,2] # The symbols are in the 2nd column
      				SP500_Components} # The prolongation of this function could be to run it periodically to see the change in components


nsdq100_components <- function(){
				url = 'http://www.nasdaq.com/quotes/nasdaq-100-stocks.aspx?render=download'
				temp = read.csv(url, header=TRUE, stringsAsFactors=F)  
				tickers = temp[, 'Symbol']
				return(tickers)

#------------------------------------------------------------------------------------------------------------------
install.packages("XML")
library(XML) #Load package. We need readHTMLTable function from this package
urls<-c('http://www.cboe.com/products/snp500.aspx', 'http://www.cboe.com/products/indexcomponents.aspx')
tabla <- lapply(urls, function (url) as.data.frame(readHTMLTable(readLines(url))))
class(tabla)


# Constituetes of SPDRs -------------------------------------------------------------------------------------------------------
library(data.table)
spdr = unlist(strsplit("XLY,XLP,XLE,XLF,XLV,XLI,XLB,XLK,XLU", split=",")) # strsplit result the list, but we need character => we need unlist
url <- paste0("http://www.sectorspdr.com/sectorspdr/IDCO.Client.Spdrs.Holdings/Export/ExportCsv?symbol=", 
	 	  spdr) # paste0("a", "b") == paste("a", "b", sep="")

datalist = lapply(url, #creates list: reads all  the txt file from the folder and every dataframe in separate list componentassuming tab separated values with a header    
                  FUN=fread, # fread from the package "DATA.TABLE" does it much faster than read.table (standard functionality). The comparison of time could be done using function system.time(x), where x is our expression
                  stringsAsFactors=FALSE,
			colClasses = c("character", "character", "numeric"))
datalist <- lapply(datalist, function(x) x[,(4:9):=NULL]) # deleting not needed columns from every data.table
datalist <- mapply(cbind, datalist , "SPDR"=spdr , SIMPLIFY=F) # add new column to every data.table in the list and fills it with the symbol
datatb = rbindlist(datalist) # merging rows
datatb[,(3):=as.numeric(datatb[,(3)])] 











